===== Mycelium.java =====
package entities;

import java.util.ArrayList;
import java.util.List;

import map.HealTile;
import use_cases.UseCase;
import use_cases.UseCase.ArrowDirection;
import use_cases.UseCase.Indent;

import static use_cases.UseCase.*;

public class Mycelium extends Fungus{
    int maxHealth = 5; 
    List<FungusBody> connectedBodies = new ArrayList<FungusBody>();

    /*public Mycelium(int health, Tile currentTile) {
        super(health, currentTile);
    }*/

    public Mycelium()
    {
        super();
        replace(this);
        printWrapper("Initializing Mycelium as " + UseCase.logger.get(this), ArrowDirection.RIGHT, Indent.KEEP);
    }

    @Override
    public void update() {

        searchConnection();
        // if it has at least one body, reset health
        if(!connectedBodies.isEmpty()) {
            health = maxHealth;
        } else if (this.getCurrentTile() instanceof HealTile) {
            this.heal();
        }
        else {
            health--;
        }
    }

    // Reconnect with the mycelium network, recover health
    // Neighbor cells will be checked for mycelium
    public void connect(){
        // Will implement later
    }

    // Disconnect from the mycelium network, lose health
    public void detach(){
        // Will implement later
    }

    // Check if the mycelium has been connected to a body
    private boolean searchConnection(){
        // Will implement later
        return false;
    }

    @Override
    public void damage() {
        health--;
        if(health <= 0) {
            detach();
            // remove from tile
            currentTile.removeEntity(this);
        }
    }

    @Override
    public void heal() {
        if (health < maxHealth) {
            health++;
        }
    }
}

===== SlowSpore.java =====
package entities;

import map.Tile;
import use_cases.UseCase;
import use_cases.UseCase.ArrowDirection;
import use_cases.UseCase.Indent;

/*
 * Spore that slows down the insect that eats it
 * effectValue must be less than 100 (its a percentage)
 */
public class SlowSpore extends Spore {
    /*public SlowSpore(int id, Tile currentTile, int nutrientValue, int lifetime, int effectTime, int effectValue) {
        super(id, currentTile, nutrientValue, lifetime, effectTime, effectValue);
    }*/
    public SlowSpore(int effectValue){
        super();
        this.effectValue = effectValue;
        UseCase.replace(this);
        UseCase.printWrapper("Initializing SlowSpore as " + UseCase.logger.get(this), ArrowDirection.RIGHT, Indent.KEEP);
    }

    /*
     * apply speed reduction to the insect
     */
    @Override
    public void getEaten(Insect i) {
        isConsumed = true;
        i.setSpeedPercent(effectValue);
        i.addSpore(this);
        currentTile.removeEntity(this);
    }

    /*
     * Restore insect speed to 0 (applies default speed)
     */
    @Override
    public void removeEffect(Insect i) {
        i.setSpeedPercent(0);
    }

}


===== SpeedUpSpore.java =====
package entities;

import map.Tile;
import use_cases.UseCase;
import use_cases.UseCase.ArrowDirection;
import use_cases.UseCase.Indent;

/*
 * Spore that speeds up the insect
 * effectValue must be greater than 100 (its a percentage)
 */
public class SpeedUpSpore extends Spore {
    /*public SpeedUpSpore(int id, Tile currentTile, int nutrientValue, int lifetime, int effectTime, int effectValue) {
        super(id, currentTile, nutrientValue, lifetime, effectTime, effectValue);
    }*/

    public SpeedUpSpore(int effectValue) {
        super();
        this.effectValue = effectValue;
        UseCase.replace(this);
        UseCase.printWrapper("Initializing SpeedUpSpore as " + UseCase.logger.get(this), ArrowDirection.RIGHT, Indent.KEEP);
    }

    /*
     * apply speed increase to the insect
     */
    @Override
    public void getEaten(Insect i) {
        isConsumed = true;
        i.setSpeedPercent(effectValue);
        i.addSpore(this);
        currentTile.removeEntity(this);
    }

    /*
     * Restore insect speed to 0 (applies default speed)
     */
    @Override
    public void removeEffect(Insect i) {
        i.setSpeedPercent(0);
    }

}


===== SplitSpore.java =====
package entities;

import use_cases.UseCase;

public class SplitSpore extends Spore {

    public SplitSpore() {
        super();
        UseCase.replace(this);
        UseCase.printWrapper("Initializing SplitSpore as " + UseCase.logger.get(this), UseCase.ArrowDirection.RIGHT, UseCase.Indent.KEEP);
    }

    /*
     * When an insect eats this spore, there will be another insect summoned. The summoning process should happen outside of this class
     */
    @Override
    public void getEaten(Insect i) {
        isConsumed = true;
        i.addSpore(this);
        currentTile.removeEntity(this);
    }
}


===== Spore.java =====
package entities;

import map.Tile;
import use_cases.UseCase;
import use_cases.UseCase.ArrowDirection;
import use_cases.UseCase.Indent;

public abstract class Spore extends GameEntity{
    int nutrientValue;  // The amount of nutrients the spore contains
    int lifetime;       // The number of turns the spore will last
    int effectTime;     // The number of turns the spore will apply an effect
    int effectValue;   // The strength of the effect the spore will apply
    boolean isConsumed; // Whether the spore has been eaten by an insect

    /*protected Spore(int id, Tile currentTile, int nutrientValue, int lifetime, int effectTime, int effectValue) {
        super(id, currentTile);
        this.nutrientValue = nutrientValue;
        this.lifetime = lifetime;
        this.effectTime = effectTime;
        this.effectValue = effectValue;
    }*/

    protected Spore() {
        super();
    }

    public void getEaten(Insect i) {
        isConsumed = true;
        // implemented in subclasses
        // take care to set flag in overridden method
    }

    public void removeEffect(Insect i){
        // implemented in subclasses
    }

    /*
     * Decrease the lifetime of the spore when on the ground
     * Decrease the effectTime of the spore when applied to an insect
     */
    public void update() {
        lifetime--;
        if(isConsumed){
            effectTime--;
        }
    }

    public int getLifetime() {
        return lifetime;
    }

    public int getEffectTime() {
        return effectTime;
    }

    public int getNutrientValue() {
        return nutrientValue;
    }

}


===== AcidTile.java =====
package map;

import entities.GameEntity;

public class AcidTile extends Tile{
    int damageRate; // The rate at which the acid damages entities

    public AcidTile(int growthRate, int maxMycelium, Tekton parentTekton, int damageRate) {
        //super(growthRate, maxMycelium, parentTekton);
        super();
        this.damageRate = damageRate;
    }

    @Override
    public void addEntity(GameEntity entity) {
        // TODO Auto-generated method stub
        super.addEntity(entity);
    }

    public void damageEntities() {
        // Will implement later
    }

    @Override
    public void update() {
        // Will implement later
    }

}


===== HealTile.java =====
package map;

import entities.*;

public class HealTile extends Tile{
    public HealTile(int growthRate, int maxMycelium, Tekton parentTekton){
        super(growthRate, maxMycelium, parentTekton);
    }

    @Override
    public void update() {
        // Will implement later
    }


}


===== Map.java =====
package map;

import use_cases.UseCase;
import use_cases.UseCase.ArrowDirection;
import use_cases.UseCase.Indent;

import java.util.ArrayList;
import java.util.List;

import entities.GameEntity;

import static use_cases.UseCase.printWrapper;
import static use_cases.UseCase.replace;

public class Map {
    List<Tekton> tektons;

    public Map() {
        replace(this);
        UseCase.printWrapper("Initializing Map as " + UseCase.logger.get(this), UseCase.ArrowDirection.RIGHT, UseCase.Indent.KEEP);
        tektons = new ArrayList<>();
        UseCase.printWrapper("Map: "+UseCase.logger.get(this), ArrowDirection.LEFT);
    }

    public int addTekton(Tekton tekton) {
        UseCase.printWrapper(UseCase.logger.get(this)+".addTekton(" + UseCase.logger.get(tekton)+")", ArrowDirection.RIGHT, Indent.INDENT);
        tektons.add(tekton);
        UseCase.printWrapper(UseCase.logger.get(this)+".addTekton()", ArrowDirection.LEFT, Indent.UNINDENT);
        return tektons.size() - 1;
    }

    public List<Tekton> getTektons() {
        return tektons;
    }

    public void removeTekton(Tekton tekton) {
        tektons.remove(tekton);
    }

    public void update(GameEntity e) {
        UseCase.printWrapper(UseCase.logger.get(this)+".update(" + UseCase.logger.get(e)+")", ArrowDirection.RIGHT, Indent.INDENT);
        e.update();
        UseCase.printWrapper(UseCase.logger.get(this)+".update()", ArrowDirection.LEFT, Indent.UNINDENT);

    }

    public void tick() {
        // for every tekton
        for (Tekton tek : tektons) {
            // for every tile
            for (Tile t : tek.tiles) {
                //determine if its mycelium is connected
                //TODO
            }
        }
    }
}


===== MonoTile.java =====
package map;

import entities.*;

public class MonoTile extends Tile{
    boolean isTaken; // Whether the tile is taken by a Fungus

    public MonoTile(int growthRate, int maxMycelium, Tekton parentTekton){
        //super(growthRate, maxMycelium, parentTekton);
        super();
        isTaken =false;
    }

    public boolean isTaken() {
        return isTaken;
    }

    @Override
    public void addEntity(GameEntity entity) {
        super.addEntity(entity);
        isTaken = true;
        // TODO needs fixing to check if the entity is a fungus without type checking
    }

    @Override
    public void update() {
        // Will implement later
    }
}


